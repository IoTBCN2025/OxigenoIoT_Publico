name: CI PlatformIO (ESP32) + Release

on:
  push:
    branches: [ main, develop ]
    tags:     [ 'v*' ]  # Dispara release cuando se hace push de un tag tipo v1.2.0
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build (PlatformIO)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        env: [ esp32dev ]  # Agrega aqu√≠ otros entornos si los defines en platformio.ini

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache PlatformIO/PIP
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio/.cache
            ~/.cache/pip
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install -U platformio

      - name: Show versions
        run: |
          pio --version
          pio system info

      - name: Build ${{ matrix.env }}
        run: |
          pio run -e ${{ matrix.env }}
          pio run -e ${{ matrix.env }} -t size

      - name: Collect firmware artifact
        run: |
          mkdir -p dist/${{ matrix.env }}
          cp .pio/build/${{ matrix.env }}/firmware.bin dist/${{ matrix.env }}/firmware-${{ matrix.env }}-${{ github.ref_name }}.bin
          cp .pio/build/${{ matrix.env }}/firmware.map dist/${{ matrix.env }}/firmware-${{ matrix.env }}-${{ github.ref_name }}.map || true
          cp .pio/build/${{ matrix.env }}/firmware.elf dist/${{ matrix.env }}/firmware-${{ matrix.env }}-${{ github.ref_name }}.elf || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.env }}
          path: dist/${{ matrix.env }}/*

  release:
    name: Publish Release on Tag
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifacts from build
        uses: actions/download-artifact@v4
        with:
          path: dist_all

      - name: List artifacts
        run: ls -R dist_all

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist_all/**/firmware-*.bin
            dist_all/**/firmware-*.elf
            dist_all/**/firmware-*.map
          draft: false
          prerelease: false
          generate_release_notes: false
          body: |
            üÜï Versi√≥n: **${{ github.ref_name }}**

            ‚úÖ Compilado con PlatformIO
            üß™ Entorno: `${{ matrix.env }}`
            üîß Commit: `${{ github.sha }}`

            ---
            ‚ö†Ô∏è Este firmware est√° generado autom√°ticamente por GitHub Actions.
